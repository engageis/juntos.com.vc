= render 'shared/header_big'
.admin.admin-contributions
  .w-container
    .w-row
      h3 = t('admin.filter.title')
    = simple_form_for '', url: admin_contributions_path, method: :get do |form|
      .w-row
        .w-col-2.w-col
          = form.input :by_id, as: :integer, label: t('.id'), required: false
        .w-col-2.w-col
          = form.input :by_user_id, as: :integer, label: t('.user_id'), required: false
        .w-col-4.w-col
          .w-row
            .w-col-5.w-col
              = form.input 'between_values[start_at]', as: :integer, label: t(".between_values"), required: false
            .w-col-5.w-col.u-margintop-10.u-marginleft-20
              = form.input 'between_values[ends_at]', as: :integer, label: '', required: false
        .w-col-4.w-col
          = form.input :payer_email_contains, as: :string, label: t('.payer_email'), required: false
      .w-row
        .w-col-2.w-col
          = form.input :by_payment_id, as: :string, label: t('.payment_id'), required: false
        .w-col-2.w-col
          = form.input :with_state, collection: Contribution.state_names, label: t('channels.admin.filter.with_state'), as: :select, selected: params[:with_state], include_blank: true, required: false
        .w-col-4.w-col
          = form.input :project_name_contains, as: :string, label: t('.project'), required: false
        .w-col-4.w-col
          = form.input :user_name_contains, as: :string, label: t('.user'), required: false
      .w-row
        .w-col-4.w-col
          = form.input :user_cpf_contains, as: :string, label: t('.user_cpf'), required: false
        .w-col-4.w-col
          = form.input :user_email_contains, as: :string, label: t('.user_email'), required: false
        .w-col-2.w-col
          = form.input :by_key, as: :string, label: t('.key'), required: false
        .w-col-2.w-col
          = form.input :credits, as: :boolean, label: t('.credits'), required: false
      .w-row
        .w-col-4.w-col
          = form.input :with_cause, collection: Category.all.map{|c| [c.name_pt, c.id]}, label: t('channels.admin.filter.cause'), as: :select, selected: params[:with_cause], include_blank: true, required: false
        .w-col-2.w-col
          = form.input :platform_contributions, as: :boolean, label: t('.platform_contributions'), required: false
        .w-col-2.w-col
          = form.input :partner_indications, as: :boolean, label: t('.partner_indication'), required: false
        .w-col-2.w-col
          = form.input :only_recurring, as: :boolean, label: t('.only_recurring')
        .w-col-2.w-col
          = form.input :only_cancelled_recurring, as: :boolean, label: t('.only_cancelled_recurring')
      .w-row
        .w-col-8.w-col
        .w-col.w-col-2.u-margintop-20
          = link_to t('.search_report'), admin_contributions_path(params: params,format: :csv), class: 'btn bt-medium'
        .w-col-2.w-col.u-margintop-20
          = form.button :submit, t('channels.admin.filter.submit'), class: 'bt-medium'

  = paginate @contributions
  - if @contributions.empty?
    .u-margintop-40= t('.no_contributions')
  - else
    - @contributions.includes(:project, :user, :reward).each do |contribution|
      table.admin-contributions.table.u-margintop-40
        thead.card.card-secondary
          tr
            th= t('.contribution')
            th= t('.project')
            th= t('.project_state')
            th= t('.user')
            th= t('.value')
            th= t('.project_value')
            th= t('.platform_value')
            th= t('.reward')
            th= t('.emails')
            th= t('.anonymous')
            th= t('.credits')
            th= t('.state')
            th
        tbody
          tr id=contribution.id class=cycle("even", "odd")
            td
              = link_to contribution.id, admin_contribution_path(contribution)
            td.project_info
              = link_to contribution.project.name, project_by_slug_path(permalink: contribution.project.permalink)
            td.project_info
              = contribution.project.state
            td.user_info
              = link_to contribution.user.name, user_path(contribution.user)
            td
              = best_in_place [:admin, contribution], :value, method: :put, type: :input
            td
              = best_in_place [:admin, contribution], :project_value, method: :put, type: :input
            td
              = best_in_place [:admin, contribution], :platform_value, method: :put, type: :input
            td.reward.large-1.columns
              - if contribution.reward
                span = contribution.reward.display_minimum
              - else
                | -
            td.key
              strong=' t('.details.payer_email')
              = contribution.payer_email
              br
              strong=' t('.details.normal_email')
              = contribution.user.email
            td= (contribution.anonymous ? t('yes') : t('no'))
            td= (contribution.credits ? t('yes') : t('no'))
            td= contribution.state
            td.w-col-1.w-col
              .project-admin-menu
                = link_to '', 'javascript:void(0);', data: {toggle: 'dropdown'}, class: 'w-dropdown-btn dropdown-toggle fa fa-sort-down'
              nav.w-dropdown-list.dropdown-list.user-menu.u-marginleft--200
                - if contribution.confirmed?
                  = link_to t('admin.contributions.index.unconfirm_contribution'), pendent_admin_contribution_path(contribution, local_params: params), method: :put, class: 'w-dropdown-link dropdown-link fontsize-smaller'
                - else
                  = link_to t('admin.contributions.index.confirm_contribution'), confirm_admin_contribution_path(contribution, local_params: params), method: :put, class: 'w-dropdown-link dropdown-link fontsize-smaller'

                - if contribution.can_request_refund? && contribution.can_do_refund?
                  = link_to t('admin.contributions.index.request_refund'), request_refund_admin_contribution_path(contribution, local_params: params), method: :put, class: 'w-dropdown-link dropdown-link fontsize-smaller'

                - if contribution.requested_refund? or contribution.confirmed?
                  = link_to t('admin.contributions.index.refund_contribution'), refund_admin_contribution_path(contribution, local_params: params), method: :put, class: 'w-dropdown-link dropdown-link fontsize-smaller'
                = link_to t('admin.contributions.index.refund_and_hide'), hide_admin_contribution_path(contribution, local_params: params), method: :put, class: 'w-dropdown-link dropdown-link fontsize-smaller'
                = link_to t('admin.contributions.index.cancel'), cancel_admin_contribution_path(contribution, local_params: params), method: :put, class: 'w-dropdown-link dropdown-link fontsize-smaller'
                = link_to t('admin.contributions.index.push_to_trash'), push_to_trash_admin_contribution_path(contribution, local_params: params), method: :put, class: 'w-dropdown-link dropdown-link fontsize-smaller'
                - if (contribution.waiting_confirmation? || contribution.pending? || contribution.canceled?) && contribution.slip_payment? && contribution.can_generate_second_slip?
                  = link_to 'Segunda via de boleto', contribution.second_slip_path, target: '__blank', method: :put, class: 'w-dropdown-link dropdown-link fontsize-smaller'
          tr id="contribution_details-#{contribution.id}"
            td
            td colspan='10'
              table.table
                thead.card
                  th= t('.key')
                  th= t('.details.payment_id')
                  th= t('.details.acquirer_tid')
                  th= t('.details.payment_method')
                  th= t('.details.payment_choice')
                  th= t('.details.acquirer_name')
                  th= t('.details.installments')
                  th= t('.details.created_at')
                tbody
                  tr
                    td= contribution.key
                    td= contribution.payment_id
                    td= contribution.acquirer_tid
                    td= contribution.payment_method
                    td= contribution.payment_choice
                    td= contribution.acquirer_name
                    td= contribution.installments
                    td= l(contribution.created_at, format: :simple) if contribution.created_at.present?
  = paginate @contributions
